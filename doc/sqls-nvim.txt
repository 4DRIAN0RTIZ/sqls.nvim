*sqls-nvim.txt*		                Neovim plugin for the sqls language server

SETUP                                           *sqls-nvim-setup*

Setup the plugin with nvim-lspconfig https://github.com/neovim/nvim-lspconfig
>
    require('lspconfig').sqls.setup{
        on_attach = function(client, bufnr)
            require('sqls').on_attach(client, bufnr)
        end
    }
<
==============================================================================
COMMANDS                                        *sqls-nvim-commands*

                                                *:SqlsExecuteQuery*
:SqlsExecuteQuery          In normal mode, executes the query in the current
                           buffer. In visual mode, executes the selected query
                           (only works line-wise). Shows the results in a
                           preview buffer.


                                                *:SqlsExecuteQueryVertical*
:SqlsExecuteQueryVertical  Same as `:SqlsExecuteQuery`, but the results are
                           displayed vertically.


                                                *:SqlsShowDatabases*
:SqlsShowDatabases         Shows a list of available databases in a preview
                           buffer.

                                                *:SqlsShowSchemas*
:SqlsShowSchemas           Shows a list of available schemas in a preview
                           buffer.

                                                *:SqlsShowConnections*
:SqlsShowConnections       Shows a list of available database connections in a
                           preview buffer.

                                                *:SqlsSwitchDatabase*
:SqlsSwitchDatabase {database_name}
                           Switches to a different database. If
                           {database_name} is omitted, displays an interactive
                           prompt with |vim.ui.select()| to select a database.

                                                *:SqlsSwitchConnection*
:SqlsSwitchConnection {connection_index}
                           Switches to a different database connection. If
                           {connection_index} is omitted, displays an
                           interactive prompt with |vim.ui.select()| to select
                           a connection.

==============================================================================
MAPS                                            *sqls-nvim-maps*

                                                *<Plug>(sqls-execute-query)*
<Plug>(sqls-execute-query)           In visual mode, executes the selected
                                     range. In normal mode, executes a motion
                                     (like |ip| or |aw|)

                                                *<Plug>(sqls-execute-query-vertical)*
<Plug>(sqls-execute-query-vertical)  same as |<Plug>(sqls-execute-query)|, but
                                     the results are displayed vertically

USING MODS

You can customize how the results are displayed by using command modifiers in
your key mappings. These modifiers allow you to control where and how the
result buffer appears when executing SQL queries.

Example: Custom Key Mapping with 'botright' Modifier

To display the results in a window at the bottom of your current window, you
can use the botright modifier in your key mapping.

vim.api.nvim_set_keymap('v', ';eq', ':<C-U>botright \'<,\'>SqlsExecuteQuery<CR>', { noremap = true, silent = true })

Mode: Visual ('v')
Key Combination: ;eq
Command: :<C-U> | Clears any existing range or command-line content.
         botright | Modifier to open the result window at the bottom.
         '<,'> | Represents the selected range in visual mode.
         SqlsExecuteQuery | Executes the SQL query within the selected range.
         <CR> | Executes the command.


Available Modifiers:

vertical: Opens the window vertically
botright: Positions the window at the bottom or right
aboveleft : Position the window at the top or left
split: Opens in a horizontal split.
vsplit: Opens in a vertical split.
tabnew: Opens in a new tab.

Tips:
    Combining Modifiers: You can combine modifiers to get the desired window
    placement, like 'vertical botright'
    Silent Execution: Add 'silent' before the command to suppress messages.

==============================================================================
EVENTS                                          *sqls-nvim-events*

sqls.nvim dispatches custom |User| events that can be subscribed to using
|autocommand|s. It exposes custom data via the `data` key in Lua callbacks
(see |nvim_create_autocmd()|):
>
    vim.api.nvim_create_autocmd('User', {
        pattern = 'SqlsConnectionChoice',
        callback = function(event)
            vim.notify(event.data.choice)
        end,
    })
<
                                                *User_SqlsDatabaseChoice*
User SqlsDatabaseChoice
                           After switching databases. Callback data:
                           • choice: (string) the chosen database

                                                *User_SqlsConnectionChoice*
User SqlsConnectionChoice
                           After switching connections. Callback data:
                           • choice: (string) the chosen connection

vim:tw=78:et:ft=help:norl:
